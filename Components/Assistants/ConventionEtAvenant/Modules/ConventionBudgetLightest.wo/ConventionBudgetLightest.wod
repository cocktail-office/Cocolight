HasTranches : WOConditional {
    condition = dgTranchesAnnuelles.allObjects.count;
}

HasNoTranche : WOConditional {
    condition = dgTranchesAnnuelles.allObjects.count;
    negate = true;
}

ContainerAvenantBudget : AjaxUpdateContainer {
    id = "ContainerAvenantBudget";
}

ContainerBudgetDetail : AjaxUpdateContainer {
    id = "ContainerBudgetDetail";
}

FormAvenantBudget : ERXWOForm {
  id = "FormAvenantBudget";
  name="FormAvenantBudgetName";
  multipleSubmit = true;
  onsubmit = "return false;";
}

TableViewTranchesAnnuelles : CktlAjaxTableView {
    id = "TableViewTranchesAnnuellesBudget";
    dg = dgTranchesAnnuelles;
    disabled = true;
    item = currentTrancheAnnuelle;
    colonnes = dicoTranchesAnnuellesLight.colonnes; //VALID
    selectionEnabled = true;
    afficherBarreDeNavigation = false;
    afficherBarreDeStatut = false;
    height = "90px";
    callbackOnSelectionner = changerTranche;
    updateContainerID = "ContainerAvenantBudget";
}

TabsNatureDest : AjaxTabbedPanel {
    id = "TabbedPanelNatureDest";
    busyDiv = "MyBusyDivID";
}

TabDepenses : AjaxTabbedPanelTab {
    name = depensesTab.libelle;
    isSelected = depensesTab.selected;
    refreshOnSelect = true;
    id = "TabBudgetDepenses";
    isVisible = tabDepensesVisible;
}

TabRecettes : AjaxTabbedPanelTab {
    name = recettesTab.libelle;
    isSelected = recettesTab.selected;
    refreshOnSelect = true;
    id = "TabBudgetRecettes";
    isVisible = tabRecettesVisible;
}

TabReport : AjaxTabbedPanelTab {
    name = reportTab.libelle;
    isSelected = reportTab.selected;
    refreshOnSelect = true;
    id = "TabReport";
    isVisible = tabReportVisible;
}

ReportCredits : ReportCredits {
	trancheSource = selectedTranche;
}

Exercice : WOString {
    value = exercice.exeExercice;
}

TableViewCreditsDepensesRecap : CktlAjaxTableView {
    id = "TableViewCreditsDepensesRecap"; 
    dg = dgCreditsDepensesRecap;
    disabled = true;
    item = currentTrancheBudget;
    colonnes = dicoCreditsPositionnesRecap.colonnes; //VALID
    selectionEnabled = true;
    afficherBarreDeNavigation = false;
    afficherBarreDeStatut = false;
    height = "90px";
    width = "98%";
}

AjoutCreditDepSimpleModal : CktlAjaxWindow {
    id = "AjoutCreditDepSimpleModal";
    width = "600";
    height = "350";
    title = "Positionner un crédit";
}

LigneBudg : ERXOptGroupPopupButton {
	label = groupeOrganLabel;
	group = groupeOrgan;
    id = "LigneBudg";
    list = organs;
    item = currentOrgan;
    selection = newTrancheBudget.organ;
    displayString = currentOrgan.longString;
    noSelectionString = "Sélectionner une ligne budgétaire";
}

AjoutCreditDepContainer : AjaxUpdateContainer {
    id = "AjoutCreditDepContainer";
    style = "padding:10px;";
}

MontantObs : AjaxObserveField {
    updateContainerID = "PctContainer";
    elementName = "span";
}

PctObs : AjaxObserveField {
    updateContainerID = "MontantContainer"; 
    elementName = "span";
}

PctContainer : AjaxUpdateContainer {
    id = "PctContainer";
}

MontantContainer : AjaxUpdateContainer {
    id = "MontantContainer";
}

PctMontant : WOTextField {
    value = newTrancheBudgetPct;
    formatter = application.app2DecimalesFormatter;
    class = "pctMontant";
    size = 3;
}

Montant : WOTextField {
    value = newTrancheBudget.tbMontant;
    formatter = application.app2DecimalesFormatter;
}

FormCreditDep : WOForm {
    
}

Annuler : CktlAjaxButton {
    action = annulerAjoutCreditDep;
    type = "cancel";
    text = "Annuler";
}

Valider : CktlAjaxSubmitButton {
    action = validerAjoutCreditDep;
    type = "validate";
    text = "Valider";
    updateContainerID = "AjoutCreditDepContainer";
}

AllTypeCredit :  WOPopUpButton {
    id = "TCPos";
    list = allTypesCreditDepense;
    item = currentTypeCredit;
    selection = newTrancheBudget.typeCredit;
    displayString = currentTypeCredit.tcdCodeEtLibAbrege;
    noSelectionString = "Sélectionner un type de crédit";
}

AjouterCreditSimpleDep : CktlAjaxButton {
    action = ajouterCreditDepense;
    type = "new";
    dialogIDForOpen = "AjoutCreditDepSimpleModal";
    enabled = selectedTranche.exercice;
}

SupprimerCreditSimpleDep : CktlAjaxButton {
    action = supprimerCreditDepense;
    type = "delete";
    onClickBefore = "confirm('Êtes-vous sûr de vouloir supprimer ce postionnement de crédit ?')";
    updateContainerID = "ContainerAvenantBudget";
    enabled = dgCreditsDepensesRecap.selectedObject;
}

ToolBar : CktlAjaxToolbar {

}

TotalPositionne : WOString {
	value = selectedTranche.totalPositionne;
	formatter = application.app2DecimalesFormatter;
}

ResteAPositionne : WOString {
	value = selectedTranche.resteAPositionne;
	formatter = application.app2DecimalesFormatter;
}

TableViewCreditsRecettesRecap : CktlAjaxTableView {
    id = "TableViewCreditsDepensesRecap"; 
    dg = dgCreditsRecettesRecap;
    disabled = true;
    item = currentTrancheBudgetRec;
    colonnes = dicoCreditsPositionnesRecRecap.colonnes; //VALID
    selectionEnabled = true;
    afficherBarreDeNavigation = false;
    afficherBarreDeStatut = false;
    height = "90px";
    width = "98%";
}

AjouterCreditSimpleRec : CktlAjaxButton {
    action = ajouterCreditRecette;
    type = "new";
    dialogIDForOpen = "AjoutCreditRecSimpleModal";
    enabled = selectedTranche.exercice;
}

SupprimerCreditSimpleRec : CktlAjaxButton {
    action = supprimerCreditRecette;
    type = "delete";
    onClickBefore = "confirm('Êtes-vous sûr de vouloir supprimer ce postionnement de crédit en recette ?')";
    updateContainerID = "ContainerAvenantBudget";
    enabled = dgCreditsRecettesRecap.selectedObject;
}

TotalPositionneRec : WOString {
    value = selectedTranche.totalPositionneRec;
    formatter = application.app2DecimalesFormatter;
}

ResteAPositionneRec : WOString {
    value = selectedTranche.resteAPositionneRec;
    formatter = application.app2DecimalesFormatter;
}

PctMontantRec : WOTextField {
    value = newTrancheBudgetRecPct;
    formatter = application.app2DecimalesFormatter;
    class = "pctMontant";
    size = 3;
}

MontantRec : WOTextField {
    value = newTrancheBudgetRec.tbrMontant;
    formatter = application.app2DecimalesFormatter;
}


AnnulerRec : CktlAjaxButton {
    action = annulerAjoutCreditRec;
    type = "cancel";
    text = "Annuler";
}

ValiderRec : CktlAjaxSubmitButton {
    action = validerAjoutCreditRec;
    type = "validate";
    text = "Valider";
    updateContainerID = "AjoutCreditRecContainer";
}

AjoutCreditRecSimpleModal : CktlAjaxWindow {
    id = "AjoutCreditRecSimpleModal";
    width = "600";
    height = "350";
    title = "Positionner un crédit";
}

AjoutCreditRecContainer : AjaxUpdateContainer {
    id = "AjoutCreditRecContainer";
    style = "padding:10px;";
}

FormCreditRec : WOForm {
    
}

LigneBudgRec : ERXOptGroupPopupButton {
	label = groupeOrganLabel;
	group = groupeOrgan;
    id = "LigneBudgRec";
    list = organs;
    item = currentOrgan;
    selection = newTrancheBudgetRec.organ;
    displayString = currentOrgan.longString;
    noSelectionString = "Sélectionner une ligne budgétaire";
}

AllTypeCreditRec :  WOPopUpButton {
    id = "TCPos";
    list = allTypesCreditRecette;
    item = currentTypeCredit;
    selection = newTrancheBudgetRec.typeCredit;
    displayString = currentTypeCredit.tcdCodeEtLibAbrege;
    noSelectionString = "Sélectionner un type de crédit";
}

ValiderTranche : CktlAjaxButton {
    action = validerTranche;
    text = validerTrancheText;
    updateContainerID = "ContainerAvenantBudget";
    type = "validate";
    enabled = peutValiderTranche;
}

Toolbar : CktlAjaxToolbar {
    
}

ExoNonCree : ERXWOConditional {
    condition = selectedTranche.exercice;
    negate = true;
}


ContainerAvenantVoletFinancier : AjaxUpdateContainer {
	id = "ContainerAvenantVoletFinancier";
	class = classeCss;
	style = styleCss;
	action = refreshContainerAvenantVoletFinancier;
}
FormAvenantVoletFinancier : ERXWOForm {
  id = "FormAvenantVoletFinancier";
  name="FormAvenantVoletFinancierName";
  action = submit;
  multipleSubmit = true;
  onsubmit = "return false;";
}

ContainerTranches : AjaxUpdateContainer {
	id = "ContainerTranches";
}

TRModeDeGestion : AjaxUpdateContainer {
	id = "AvtVoletFin_TRModeDeGestion";
	elementName = "tr";
}
ModeDeGestion : WOTextField {
	id = "AvtVoletFin_ModeDeGestion";
	disabled = true;
	value = contrat.avenantZero.modeGestionRelationship.mgLibelle;
	class = "useMaxWidth";
}
CBConventionLucrative : WOCheckBox {
	// tabindex = "2";
	id = "AvtVoletFin_CBConventionLucrative";
	checked = avenant.avtLucrativiteBoolean;
	disabled = disabled;
}
CBConventionLucrativeObserver : AjaxObserveField {
	observeFieldID = "AvtVoletFin_CBConventionLucrative";
	action = submit;
}
CBCreditsLimitatifs : WOCheckBox {
	// tabindex = "3";
	id = "AvtVoletFin_CBCreditsLimitatifs";
	checked = contrat.avenantZero.avtLimitatifBoolean;
	disabled = isCBCreditsLimitatifsDisabled;
}
CBCreditsLimitatifsObserver : AjaxObserveField {
	observeFieldID = "AvtVoletFin_CBCreditsLimitatifs";
	action = submit;
}
CBReconductible : WOCheckBox {
	// tabindex = "4";
	id = "AvtVoletFin_CBReconductible";
	checked = contrat.reconductible;
	disabled = true;
}

TrResumeFinancier : ConventionTotalFinancierView {
	contrat = contrat;
	updateContainerID = "ContainerAvenantVoletFinancier";
	disabled = disabled;
}

TableViewTranchesAnnuelles : CktlAjaxEditableTableView {
	disabled = disabled;
	id = "TableViewTranchesAnnuelles";
	dg = ctrl.dgTranchesAnnuelles;
	item = ctrl.uneTrancheAnnuelle;
	colonnes = ctrl.dicoTranchesAnnuelles.colonnes; // VALID
	selectionEnabled = true;
	editionEnabled = true;
	afficherBarreDeNavigation = false;
	afficherBarreDeStatut = false;
	height = "90px";
	callbackOnSelectionner = ctrl.selectionnerUneTrancheAnnuelle;
	updateContainerID = "ContainerDetailTranche";
	// updateContainerIDs = updateContainerIDsForTVTranchesAnnuelles;
	// updateContainerIDs = "ContainerMontantDisponible,ContainerDetailTranche";
}

SommeRecNature : WOString {
	value = ctrl.selectedTranche.sommeRecettesNature;
    formatter = application.app2DecimalesFormatter;
}

SommeRecDest : WOString {
	value = ctrl.selectedTranche.sommeRecettesDestination;
    formatter = application.app2DecimalesFormatter;
}

BalanceRecNatureDest : WOString {
	value = ctrl.selectedTranche.balanceRecettesNatureDestination;
    formatter = application.app2DecimalesFormatter;
}

SommeDepNature : WOString {
	value = ctrl.selectedTranche.sommeDepensesNature;
    formatter = application.app2DecimalesFormatter;
}

SommeDepDest : WOString {
	value = ctrl.selectedTranche.sommeDepensesDestination;
    formatter = application.app2DecimalesFormatter;
}

BalanceDepNatureDest : WOString {
	value = ctrl.selectedTranche.balanceDepensesNatureDestination;
    formatter = application.app2DecimalesFormatter;
}

BalanceRecDepNature : WOString {
	value = ctrl.selectedTranche.balanceRecettesDepensesNature;
    formatter = application.app2DecimalesFormatter;
}

BalanceRecDepDest : WOString {
	value = ctrl.selectedTranche.balanceRecettesDepensesDestination;
    formatter = application.app2DecimalesFormatter;
}



ContainerDetailTranche : AjaxUpdateContainer {
	id = "ContainerDetailTranche";
	action = initialiserOnglets;
}
IsTrancheSelected : WOConditional {
	condition = trancheBudgetSelected;
}
TabbedPanelDetailTranche : AjaxTabbedPanel {
	id = "TabbedPanelDetailTranche";
}

TabContributeurs : AjaxTabbedPanelTab {
	name = "Contributeurs";
	isSelected = isTabContributeursSelected;
	refreshOnSelect = true;
}
TableViewContributeurs : CktlAjaxEditableTableView {
	//disabled = ctrl.nePeutPasEditerTranche;
	id = "TableViewContributeurs";
	dg = ctrl.dgRepartPartenaireTranches;
	item = ctrl.uneRepartPartenaireTranche;
	colonnes = ctrl.dicoRepartPartenaireTranches.colonnes; // VALID
	selectionEnabled = true;
	editionEnabled = true;
	afficherBarreDeNavigation = false;
	afficherBarreDeStatut = false;
	height = "220px";
	//updateContainerIDs = updateContainerIDsForTVContributeurs;
	updateContainerID = "ContainerTranches";
	disabled = disabled;
}

TabDepenses : AjaxTabbedPanelTab {
	name = "D&eacute;penses";
	isVisible = isTabDepensesVisibled;
	isSelected = isTabDepensesSelected;
	refreshOnSelect = true;
}
TableViewDepenses : CktlAjaxTableView {
	updateContainerID = "ContainerDetailDepense";
	disabled = disabled;
	id = "TableViewDepenses";
	dg = ctrl.dgDepenses;
	item = ctrl.uneDepense;
	colonnes = ctrl.dicoDepenses.colonnes; // VALID
	selectionEnabled = true;
	afficherBarreDeNavigation = false;
	afficherBarreDeStatut = false;
	height = "155px";
	width = "98%";
}
TableViewDepensesToolBar : CktlAjaxToolbar {
}
AjouterDepense : CktlAjaxButton {
	id = "AjouterDepense";
	title = titleForNewDepense;
	type = "new";
	action = doNothing;
	onFailure = application.onFailureMessage;
	dialogIDForOpen = "AddDepenseModalBox";
	//disabled = ctrl.nePeutPasAjouterDepenses;
}
ModifierDepense : CktlAjaxButton {
	id = "ModifierDepense";
	title = "Modifier la dépense";
	type = "edit";
	action = doNothing;
	onFailure = application.onFailureMessage;
	disabled = isModifierUneDepenseDisabled;
	dialogIDForOpen = "EditDepenseModalBox";
}
SupprimerDepense : CktlAjaxButton {
	id = "SupprimerDepense";
	title = "Supprimer la dépense";
	type = "delete";
    onClickBefore = "confirm('Etes-vous sûr de vouloir supprimer cette dépense ?')";
	action = ctrl.supprimerUneDepense;
	onFailure = application.onFailureMessage;
	disabled = isSupprimerUneDepenseDisabled;
	// updateContainerID = "ContainerDetailPartenaire";
	onSuccess = "function (){ContainerAvenantVoletFinancierUpdate();}";
}

TabRecettes : AjaxTabbedPanelTab {
	name = "Recettes";
	isVisible = isTabRecettesVisibled;
	isSelected = isTabRecettesSelected;
	refreshOnSelect = true;
}
TableViewRecettes : CktlAjaxTableView {
	updateContainerID = "ContainerDetailRecette";
	//disabled = disabled;
	id = "TableViewRecettes";
	dg = ctrl.dgRecettes;
	item = ctrl.uneRecette;
	colonnes = ctrl.dicoRecettes.colonnes; // VALID
	selectionEnabled = true;
	afficherBarreDeNavigation = false;
	afficherBarreDeStatut = false;
	height = "155px";
	width = "98%";
	cssStyle = "float:left;";
}
TableViewRecettesToolBar : CktlAjaxToolbar {
}
AjouterRecette : CktlAjaxButton {
	id = "AjouterRecette";
	title = titleForNewRecette;
	type = "new";
	action = doNothing;
	onFailure = application.onFailureMessage;
	dialogIDForOpen = "AddRecetteModalBox";
	//disabled = ctrl.nePeutPasAjouterRecettes;
}
ModifierRecette : CktlAjaxButton {
	id = "ModifierRecette";
	title = "Modifier la recette";
	type = "edit";
	action = doNothing;
	onFailure = application.onFailureMessage;
	disabled = isModifierUneRecetteDisabled;
	dialogIDForOpen = "EditRecetteModalBox";
}
SupprimerRecette : CktlAjaxButton {
	id = "SupprimerRecette";
	title = "Supprimer la recette";
	type = "delete";
    onClickBefore = "confirm('Etes-vous sûr de vouloir supprimer cette recette ?')";
	action = ctrl.supprimerUneRecette;
	disabled = isSupprimerUneRecetteDisabled;
	onFailure = application.onFailureMessage;
	onSuccess = "function (){ContainerAvenantVoletFinancierUpdate();}";
}

AddRecetteModalBox: CktlAjaxWindow {
	id = "AddRecetteModalBox";
	showOpener = false; 
	title = "Ajouter une nouvelle recette pouet";
	linkTitle = titleForNewRecette;
	action = ctrl.ajouterUneRecette;
	minWidth = 670;
	minHeight = 350;
	overlayOpacity = "1";
    afterHide = "function() { ContainerAvenantVoletFinancierUpdate();}";
}
EditRecetteModalBox: CktlAjaxWindow {
	id = "EditRecetteModalBox";
	showOpener = false; 
	title = "Modifier une recette";
	linkTitle = "Modifier une recette";
	action = ctrl.modifierUneRecette;
	minWidth = 670;
	minHeight = 350;
    afterHide = "function() { ContainerAvenantVoletFinancierUpdate();}";
}
AddDepenseModalBox: CktlAjaxWindow {
	id = "AddDepenseModalBox";
	showOpener = false; 
	title = "Ajouter une nouvelle dépense";
	linkTitle = "Ajouter une nouvelle dépense";
	action = ctrl.ajouterUneDepense;
	minWidth = 670;
	minHeight = 350;
	afterHide = "function() { ContainerAvenantVoletFinancierUpdate();}";
}
EditDepenseModalBox: CktlAjaxWindow {
	id = "EditDepenseModalBox";
	showOpener = false; 
	title = "Modifier une dépense";
	linkTitle = "Modifier une dépense";
	action = ctrl.modifierUneDepense;
	minWidth = 670;
	minHeight = 350;
	afterHide = "function() { ContainerAvenantVoletFinancierUpdate();}";
}

IsNotModeAssistant : WOConditional {
    condition = isStandAlone;
}

Enregistrement : EnregistrementModuleBar {
    contrat = contrat;
    accueil = accueil;
    consulter = consulter;
    enregistrer = enregistrer;
    updateContainerID = application.messageContainerID;
}


AjoutTrancheDialog : CktlAjaxWindow {
    id = "AjoutTrancheDialog";
    afterHide = "function() { ContainerAvenantVoletFinancierUpdate(); }";
    title = "Ajouter une tranche";
    width = "400";
    height = "100";
}

Form : ERXWOForm {
    id = "AjoutTrancheDialogForm";
    name = "AjoutTrancheDialogForm";
    embedded = true;
}

Exercice : WOPopUpButton {
    list = ctrl.exercicesCocktail;
    selection = ctrl.selectedExercice;
    item = ctrl.currentExercice;
    displayString = ctrl.currentExercice.exeExercice;
}

CreerTranche : CktlAjaxSubmitButton {
    action = ctrl.validerAjoutTranche;
    text = "Valider";
    type = "validate";
}

Annuler : CktlAjaxButton {
    action = ctrl.annulerAjoutTranche;
    text = "Annuler";
    type = "cancel";
}

IsGestionTrancheManuelle : WOConditional {
    condition = ctrl.gestionTrancheAuto;
    negate = true;
}

Toolbar : CktlAjaxToolbar {
    
}

AddTranche : CktlAjaxButton {
    type = "add";
    action = ctrl.ouvrirAjoutTranche;
    dialogIDForOpen = "AjoutTrancheDialog";
    disabled = ctrl.creerTrancheDisabled;
}

DelTranche : CktlAjaxButton {
    type = "delete";
    action = ctrl.supprimerTranche;
    updateContainerID = "ContainerAvenantVoletFinancier";
    onClickBefore = "confirm('Êtes-vous sûr de vouloir supprimer cette tranche ? Les dépenses, recettes et crédits seront supprimés en cascade')";
    disabled = ctrl.supprimerTrancheDisabled;
}

